#include <iostream>
using namespace std;
#include "mrc_simple.hpp"



int main(int argc, char **argv) {
  if (argc <= 2) {
    cerr << "\n"
         << "ERROR: This program expects two arguments:  input_file  output_file\n"
         << endl;
    exit(1);
  }

  try {
    // Read the file
    string in_file_name(argv[1]);
    string out_file_name(argv[2]);
    cerr << "Reading tomogram \""<<in_file_name<<"\"" << endl;
    MrcSimple tomo;
    tomo.Read(in_file_name);//You can also use "tomo.Read(cin);" or "cin>>tomo;"
    tomo.PrintStats(cerr);  //Optional (display the tomogram size & format)

    if (tomo.header.use_signed_bytes &&
      tomo.header.mode == MrcHeader::MRC_MODE_BYTE) {
      cerr <<
        "\n"
        "WARNING: File \""<< in_file_name <<"\"\n"
        "         uses signed bytes.\n"
        "         Keep in mind that when reading files using signed bytes, the IMOD\n"
        "         programs (such as 3dmod) do not allow voxel brightnesses to be\n"
        "         negative.)  IMOD will probably add 128 to each voxel's brightness\n"
        "         so that the brightnesses reported to you are all possitive (0..255).\n"
        "         This program does not do that.\n"
        "         (Brightnesses generated by this program will range from -128..127.)\n"
        "         If you prefer the way IMOD interprets these files (ie. if you want to\n"
        "         insure that all brightnesses remain positive after the conversion),\n"
        "         then use the IMOD convertersion tools.  To do that use this command:\n\n"
        "         newstack -mode 2 -in "<<in_file_name<<" -ou "<<out_file_name<<"\n"
           << endl;
    }

    cerr << "writing tomogram (in float mode)" << endl;
    tomo.Write(out_file_name); // You can also use "tomo.Write(cout);" 
                               // or "cout<<tomo;"
  }
  catch (const std::exception& e) {
    cerr << "\n" << e.what() << endl;
    exit(1);
  }
}

